package com.app.pao.service;

import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.content.Intent;
import android.os.Binder;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Messenger;

import com.app.pao.entity.event.EventBLE;
import com.app.pao.entity.model.BLEEntity;
import com.app.pao.entity.model.BLEGattEntity;
import com.ypy.eventbus.EventBus;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 蓝牙监听服务
 *
 * @author Raul
 */
public class BLEService extends Service {

    /* contains */
    private static final String TAG = "BLEService";

    public static final String ACTION_NEW_BLE = "com.app.pao.ble.new";
    // 传入服务器命令
    public static final int CMD_SCAN = 0;//开始扫描
    public static final int CMD_STOP_SCAN = 1;//停止扫描
    public static final int CMD_CONNECT = 3;//开始连接
    public static final int CMD_CONNECT_RUNNING = 5;//判断当前是否已链接
    public static final int CMD_DISCONECT = 4;//段开连接

    // 反馈数据
    public static final int MSG_SCAN = 0;//扫描信息
    public static final int MSG_STOP_SCAN = 1;//停止扫描信息
    public static final int MSG_SCAN_NEW_BLE = 2;//新的BLE设备
    public static final int MSG_CONNECTED = 3;//已连接状态信息
    public static final int MSG_DISCONECTED = 4;//段开连接状态信息
    public static final int MSG_GET_NEW_HEARTRATE = 5;//获取新的心率信息

    private IBinder mBinder = new BleBinder();
    private boolean mHasbluetoothInit = false; // 蓝牙是否被初始化
    private boolean isConnected = false;

    /**
     * blue tooth
     */
    private BluetoothManager bluetoothManager;
    private BluetoothAdapter mBluetoothAdapter;

    /**
     * ble
     */
    private Messenger mMessenger;// 消息
    private BLEGattEntity mGattEntity;//已连接的设备对象


    private List<String> macList;
    private Map<String, BLEGattEntity> mGattMap = new HashMap<String, BLEGattEntity>();

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    /**
     * on Create
     */
    @Override
    public void onCreate() {
        super.onCreate();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            if (intent.hasExtra("CMD")) {
                // 判断是否初始化
                if (!mHasbluetoothInit) {
                    initBluetooth();
                }
                // 根据命令执行不同操作
                switch (intent.getIntExtra("CMD", CMD_SCAN)) {
                    case CMD_SCAN:
                        mBluetoothAdapter.startLeScan(mLeScanCallback);
                        break;
                    case CMD_CONNECT:
                        String mac = intent.getStringExtra("deviceMac");
                        disconnect();
                        connect(mac);
                        break;
                    case CMD_STOP_SCAN:
                        mBluetoothAdapter.stopLeScan(mLeScanCallback);
                        break;
                    case CMD_DISCONECT:
                        disconnect();
                        break;
                    case CMD_CONNECT_RUNNING:
                        if(mGattEntity == null || !mGattEntity.isConnected){
                            String runningMac = intent.getStringExtra("deviceMac");
                            disconnect();
                            connect(runningMac);
                        }
                        break;
                }
            }
        }
        return super.onStartCommand(intent, flags, startId);
    }

    /**
     * on Destroy
     */
    @Override
    public void onDestroy() {
        super.onDestroy();
    }


    public class BleBinder extends Binder {
        public BLEService getService() {
            return BLEService.this;
        }
    }

    public Messenger getmMessenger() {
        return mMessenger;
    }

    public void setmMessenger(Messenger mMessenger) {
        this.mMessenger = mMessenger;
    }

    /**
     * 扫描新设备
     */
    // Device scan callback.
    private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() {
        @Override
        public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) {
            BLEEntity entity = new BLEEntity(device, rssi, scanRecord, device.getName());
            EventBus.getDefault().post(new EventBLE(MSG_SCAN_NEW_BLE, entity));
        }
    };


    /**
     * 初始化蓝牙
     */
    private void initBluetooth() {
        bluetoothManager = (BluetoothManager) getSystemService(this.BLUETOOTH_SERVICE);
        mBluetoothAdapter = bluetoothManager.getAdapter();
        mHasbluetoothInit = true;
    }

    // GattServer回调
    private void connect(String mac) {
        if (mBluetoothAdapter != null && mac != null) {
            mGattEntity = new BLEGattEntity(BLEService.this, mac, mBluetoothAdapter);
        }
    }

    private void disconnect() {
        if (mGattEntity != null && mGattEntity.getmBluetoothGatt() != null) {
            mGattEntity.getmBluetoothGatt().disconnect();
            mGattEntity.getmBluetoothGatt().close();
            mGattEntity = null;
        }
    }

}
