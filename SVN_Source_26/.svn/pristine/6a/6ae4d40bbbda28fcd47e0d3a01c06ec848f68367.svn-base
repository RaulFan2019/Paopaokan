package com.app.pao.fragment.run;

import android.graphics.Typeface;
import android.os.Build;
import android.view.ViewTreeObserver;
import android.widget.LinearLayout;

import com.app.pao.LocalApplication;
import com.app.pao.R;
import com.app.pao.data.db.WorkoutData;
import com.app.pao.entity.db.DBEntityWorkout;
import com.app.pao.entity.event.EventRuningHeartrate;
import com.app.pao.entity.event.EventRuningLocation;
import com.app.pao.entity.event.EventRuningTime;
import com.app.pao.fragment.BaseFragment;
import com.app.pao.service.RunningService;
import com.app.pao.ui.widget.RevealLayout;
import com.app.pao.utils.TimeUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.rey.material.widget.TextView;

import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.text.DecimalFormat;

/**
 * Created by Raul on 2015/11/23.
 * 正在跑步的界面
 */
public class RunningRunFragment extends BaseFragment {

    /* contains*/
    private static final String TAG = "RunningRunFragment";

    /* local view */
    @ViewInject(R.id.tv_run_running_time)
    private TextView mTimeTv;//时间文本
    @ViewInject(R.id.tv_run_running_pace)
    private TextView mPaceTv;//配速文本
    @ViewInject(R.id.tv_running_length)
    private TextView mLengthTv;//距离文本
    @ViewInject(R.id.tv_running_heartrate)
    private TextView mHeartrateTv;//心率文本
    @ViewInject(R.id.ll_data)
    private LinearLayout mDataLl;//数据信息
    @ViewInject(R.id.reveal_layout)
    private RevealLayout mRevealLayout;


    /* local data */
    private static final DecimalFormat df = new DecimalFormat("0.00");//距离转换

    private DBEntityWorkout mWorkout;//跑步历史信息

    private String mTimeValue;//已跑步时间
    private String mLengthValue;//跑步距离
    private String mPaceValue;//配速
    private String mHeartrateValue;//心率数据

    /**
     * 接收到时间变化
     *
     * @param event
     */
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(EventRuningTime event) {
        long time = event.getTime();
        if (time > 0) {
            mTimeValue = TimeUtils.formatSecondsToShortHourTime(time);
            mTimeTv.setText(mTimeValue);
        }
    }

    /**
     * 收到位置变化
     *
     * @param event
     */
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(EventRuningLocation event) {
        float length = event.getLength();
        mLengthValue = df.format(length / 1000f);
        mLengthTv.setText(mLengthValue);
        int speed = event.getSpeed();
        if (speed != 0) {
            mPaceValue = TimeUtils.formatSecondsToSpeedTime(speed);
            mPaceTv.setText(mPaceValue);
        } else {
            mPaceTv.setText("- -");
        }
    }

    /**
     * 收到心率变化
     *
     * @param event
     */
    @Subscribe(threadMode = ThreadMode.MAIN)
    public void onEventMainThread(EventRuningHeartrate event) {
        int status = event.getStatus();
        if (status == RunningService.BLE_STATUS_CONNECTED) {
            mHeartrateValue = "- -";
        } else if (status == RunningService.BLE_STATUS_DISCONNECT) {
            mHeartrateValue = "- -";
        } else {
            mHeartrateValue = event.heartrate + "";
        }
        mHeartrateTv.setText(mHeartrateValue);
    }

    @Override
    protected int getLayoutId() {
        return R.layout.fragment_run_running;
    }

    @Override
    protected void initParams() {
        mRevealLayout.setContentShown(false);
        mRevealLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    mRevealLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                } else {
                    //noinspection deprecation
                    mRevealLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
                }
                mRevealLayout.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mRevealLayout.show();
                    }
                }, 50);
            }
        });

        Typeface typeFace =Typeface.createFromAsset(getActivity().getAssets(),"fonts/TradeGothicLTStd-BdCn20.otf");
        mTimeTv.setTypeface(typeFace);
        mPaceTv.setTypeface(typeFace);
        mLengthTv.setTypeface(typeFace);
        mHeartrateTv.setTypeface(typeFace);
    }

    public void hideView() {
        mRevealLayout.hide();
    }

    public void showView() {
        mRevealLayout.show();
    }


    @Override
    public void onResume() {
        super.onResume();
        EventBus.getDefault().register(this);
        mWorkout = WorkoutData.getUnFinishWorkout(mContext, LocalApplication.getInstance().getLoginUser(mContext).userId);
        if(mWorkout != null){
            mTimeValue = TimeUtils.formatSecondsToShortHourTime(mWorkout.duration);
            mLengthValue = df.format(mWorkout.getLength() / 1000f);
            mTimeTv.setText(mTimeValue);
            mLengthTv.setText(mLengthValue);
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        EventBus.getDefault().unregister(this);
    }
}
