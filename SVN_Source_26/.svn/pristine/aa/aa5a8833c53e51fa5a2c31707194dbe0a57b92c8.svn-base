package com.app.pao.activity.login;

import android.os.Handler;
import android.os.Message;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;

import com.app.pao.ActivityStackManager;
import com.app.pao.R;
import com.app.pao.activity.BaseAppCompActivity;
import com.app.pao.activity.main.MainActivity;
import com.app.pao.config.AppEnum;
import com.app.pao.config.URLConfig;
import com.app.pao.data.PreferencesData;
import com.app.pao.network.api.MyRequestCallBack;
import com.app.pao.network.utils.RequestParamsBuild;
import com.app.pao.ui.dialog.v1.MyDialogBuilderV1;
import com.app.pao.utils.StringUtils;
import com.app.pao.utils.T;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.view.annotation.ContentView;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.rey.material.widget.Button;
import com.rey.material.widget.ImageButton;
import com.rey.material.widget.TextView;

/**
 * Created by Raul on 2015/11/16.
 * 重设密码界面
 */
@ContentView(R.layout.activity_login_reset_pwd)
public class LoginResetPwdActivity extends BaseAppCompActivity implements View.OnClickListener {

    /* contains */
    private static final String TAG = "LoginResetPwdActivity";

    private static final int MSG_POST_OK = 1;
    private static final int MSG_POST_ERROR = 2;

    /* local view */
    @ViewInject(R.id.toolbar)
    private Toolbar mToolbar;//标题栏
    @ViewInject(R.id.et_login_reset_psw)
    private EditText mPasswordEt;//密码输入框
    @ViewInject(R.id.tv_login_resetpwd_title)
    private TextView mTitleTv;//标题提示文字
    @ViewInject(R.id.ibtn_reset_password_show)
    private ImageButton mShowPswIbtn;   //是否显示密码按钮
    @ViewInject(R.id.btn_login_resetpwd_commit)
    private Button mCommitBut;

    /* local data */
    private boolean mPostAble;//是否可以发送请求
    private boolean mIsShowPsw;//是否显示密码
    private String mPhoneNum;//手机号码

    /**
     * 请求返回处理
     */
    Handler mPostHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                //网络请求失败
                case MSG_POST_ERROR:
                    T.showShort(mContext, (String) msg.obj);
                    mDialogBuilder.progressDialog.dismiss();
                    mPostAble = true;
                    break;
                //验证码验证成功
                case MSG_POST_OK:
                    mDialogBuilder.progressDialog.dismiss();
                    mPostAble = true;
                    T.showShort(mContext, getResources().getString(R.string.T_LoginResetPwdActivity_Success));
                    LaunchMainActivity();
                    break;
            }
        }
    };

    /**
     * Toolbar 点击事件
     *
     * @param item
     * @return
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            LaunchMainActivity();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }


    /**
     * 点击事件
     *
     * @param v
     */
    @Override
    @OnClick({R.id.btn_login_resetpwd_commit,R.id.ibtn_reset_password_show})
    public void onClick(View v) {
        switch (v.getId()) {
            //提交修改密码
            case R.id.btn_login_resetpwd_commit:
                PostResetPwdRequest();
                break;
            //密码是否显示明文
            case R.id.ibtn_reset_password_show:
                checkShowPsw();
                break;
        }
    }

    @Override
    protected void initData() {
        mPostAble = true;
        mPhoneNum = getIntent().getExtras().getString("phonenum");
        ActivityStackManager.getAppManager().addTempActivity(this);
    }

    @Override
    protected void initViews() {
        setSupportActionBar(mToolbar);
        mTitleTv.setText("请设置密码，之后你可以使用\n手机号" + mPhoneNum + " + 密码登录");
    }

    @Override
    protected void doMyOnCreate() {

    }

    @Override
    protected void updateData() {

    }

    @Override
    protected void updateViews() {

    }

    @Override
    protected void destroy() {
    }

    /**
     * 判断点击是否显示密码切换
     */
    private void checkShowPsw(){

        if(mIsShowPsw){
            // 隐藏密码
            mPasswordEt.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
            mShowPswIbtn.setImageResource(R.drawable.icon_showpwd);
        }else{
            //显示密码
            mPasswordEt.setInputType(InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
            mShowPswIbtn.setImageResource(R.drawable.icon_hidepwd);
        }
        mIsShowPsw = !mIsShowPsw;
        //将光标置于最后位置
        Editable ea = mPasswordEt.getText();
        mPasswordEt.setSelection(ea.length());
    }

    /**
     * 发送修改密码请求
     */
    private void PostResetPwdRequest() {
        if (!mPostAble) {
            return;
        }
        //判断密码
        String pwd = mPasswordEt.getText().toString();
        String error = StringUtils.checkPasswordInputError(mContext, pwd);
        if (!error.equals(AppEnum.DEFAULT_CHECK_ERROR)) {
            T.showShort(mContext, error);
            mPasswordEt.setError(error);
            return;
        }

        //发送验证码请求提示
        mDialogBuilder.showProgressDialog(this, "正在请求修改密码..", true);
        mDialogBuilder.setListener(new MyDialogBuilderV1.ProgressDilaogListener() {
            @Override
            public void onCancelBtnClick() {
                mPostAble = true;
                cancelPostHandler();
            }

            @Override
            public void onCancel() {
                mPostAble = true;
                cancelPostHandler();
            }
        });
        HttpUtils http = new HttpUtils();
        String POST_URL = URLConfig.URL_UPDATE_USER_INFO;
        RequestParams params = RequestParamsBuild.buildResetUserPasswordRequest(mContext,pwd);
        http.send(HttpRequest.HttpMethod.POST, POST_URL, params, new MyRequestCallBack(mContext) {

            @Override
            protected void onErrorResponse(int errorCode, String errorMsg) {
                if (mPostHandler != null) {
                    Message mPostMsg = new Message();
                    mPostMsg.what = MSG_POST_ERROR;
                    mPostMsg.obj = errorMsg;
                    mPostHandler.sendMessage(mPostMsg);
                }
            }

            @Override
            protected void onRightResponse(String Response) {
                if (mPostHandler != null) {
                    Message mPostMsg = new Message();
                    mPostMsg.what = MSG_POST_OK;
                    mPostMsg.obj = Response;
                    mPostHandler.sendMessage(mPostMsg);
                }
            }

            @Override
            protected void onFailureResponse(HttpException e, String s) {
                if (mPostHandler != null) {
                    Message mPostMsg = new Message();
                    mPostMsg.what = MSG_POST_ERROR;
                    mPostMsg.obj = s;
                    mPostHandler.sendMessage(mPostMsg);
                }
            }

            @Override
            protected void onFinish() {
            }
        });
    }

    /**
     * 跳转到主页面
     */
    private void LaunchMainActivity() {
        startActivity(MainActivity.class);
        PreferencesData.setPassword(mContext, mPasswordEt.getText().toString());
        ActivityStackManager.getAppManager().finishAllTempActivity();
    }

    /**
     * 取消请求
     */
    private void cancelPostHandler() {
        if (mPostHandler != null) {
            mPostHandler.removeMessages(MSG_POST_ERROR);
            mPostHandler.removeMessages(MSG_POST_OK);
        }
    }

}
